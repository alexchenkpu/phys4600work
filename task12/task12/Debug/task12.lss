
task12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e2  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8e:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
	
}

void setup()
{
	DDRB |= (1<<PB3); //output MOSI
  96:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1<<PB5); //output SCK
  98:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1<<PB6); //output chip select
  9a:	26 9a       	sbi	0x04, 6	; 4
	
	SPCR &= ~(1<<SPIE);
  9c:	8c b5       	in	r24, 0x2c	; 44
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPE);
  a2:	8c b5       	in	r24, 0x2c	; 44
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<DORD);
  a8:	8c b5       	in	r24, 0x2c	; 44
  aa:	8f 7d       	andi	r24, 0xDF	; 223
  ac:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<MSTR);
  ae:	8c b5       	in	r24, 0x2c	; 44
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<CPOL);
  b4:	8c b5       	in	r24, 0x2c	; 44
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<CPHA);
  ba:	8c b5       	in	r24, 0x2c	; 44
  bc:	8b 7f       	andi	r24, 0xFB	; 251
  be:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<SPR1);
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<SPR0);
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	8c bd       	out	0x2c, r24	; 44
	
	uint8_t data =5;
	uint8_t datarecieved;
	
	PORTB &= ~(1<<PB6); //pulls chip select low
  cc:	2e 98       	cbi	0x05, 6	; 5
	SPDR = data;
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	8e bd       	out	0x2e, r24	; 46
	
	while(!(SPSR & (1<<SPIF)));
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <setup+0x3c>
	datarecieved = SPDR;
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	08 95       	ret

000000dc <main>:
}

int main()
{
	setup();
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
	while(keep_going) loop();
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e4:	81 11       	cpse	r24, r1
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x8>
	
	return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
