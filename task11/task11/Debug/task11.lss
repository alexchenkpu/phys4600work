
task11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000142  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000710  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8e:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <loop>:
{
	uint16_t lowbyte;
	uint16_t highbyte;
	uint16_t finalvalue;

	ADCSRA |= (1<<ADSC); //start data collection
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24

	while(! (ADCSRA & (1<<ADIF))); //Loop until ADC complete
  a0:	80 81       	ld	r24, Z
  a2:	84 ff       	sbrs	r24, 4
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <loop+0xa>

	lowbyte = ADCL; //ex 00000000 11101101
  a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	highbyte = ADCH; //ex 00000000 00000010
  aa:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

	finalvalue = (highbyte<<8) | lowbyte;
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	92 2b       	or	r25, r18
	
	if(finalvalue<341)
  b2:	85 35       	cpi	r24, 0x55	; 85
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	92 07       	cpc	r25, r18
  b8:	18 f4       	brcc	.+6      	; 0xc0 <loop+0x2a>
	{
		PORTD |= (1 << PD7); //set
  ba:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD &= ~(1 << PD6); //unset
  bc:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~(1 << PD5);
  be:	5d 98       	cbi	0x0b, 5	; 11
	}
	
	if(finalvalue<681 && finalvalue>340)
  c0:	9c 01       	movw	r18, r24
  c2:	25 55       	subi	r18, 0x55	; 85
  c4:	31 40       	sbci	r19, 0x01	; 1
  c6:	24 35       	cpi	r18, 0x54	; 84
  c8:	31 40       	sbci	r19, 0x01	; 1
  ca:	18 f4       	brcc	.+6      	; 0xd2 <loop+0x3c>
	{
		PORTD |= (1 << PD6); //set
  cc:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD &= ~(1 << PD7); //unset
  ce:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1 << PD5);
  d0:	5d 98       	cbi	0x0b, 5	; 11
	}
	
	if(finalvalue>680)
  d2:	89 3a       	cpi	r24, 0xA9	; 169
  d4:	92 40       	sbci	r25, 0x02	; 2
  d6:	18 f0       	brcs	.+6      	; 0xde <loop+0x48>
	{
		PORTD |= (1 << PD5); //set
  d8:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD &= ~(1 << PD6); //unset
  da:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~(1 << PD7);
  dc:	5f 98       	cbi	0x0b, 7	; 11
  de:	08 95       	ret

000000e0 <setup>:
	}
}

void setup()
{
	DDRD |= (1<<PD5) | (1<<PD6) | (1<<PD7);
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	80 6e       	ori	r24, 0xE0	; 224
  e4:	8a b9       	out	0x0a, r24	; 10
	
	PORTD &= ~(1<<PD5);
  e6:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PD6);
  e8:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1<<PD7); //start all bit as 0
  ea:	5f 98       	cbi	0x0b, 7	; 11
	
	ADMUX |= (1<<REFS0);
  ec:	ec e7       	ldi	r30, 0x7C	; 124
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  f6:	80 81       	ld	r24, Z
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	80 83       	st	Z, r24
	
	ADMUX |= (1<<MUX2); 
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX0);
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX3);
 108:	80 81       	ld	r24, Z
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
 10e:	80 81       	ld	r24, Z
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //turn on adc system
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <main>:
}

int main()
{
	setup();
 120:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
	while(keep_going) loop();
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	88 23       	and	r24, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <main+0x18>
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <loop>
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 134:	81 11       	cpse	r24, r1
 136:	fa cf       	rjmp	.-12     	; 0x12c <main+0xc>
	
	return 0;
}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
